#! /bin/sh
# Copyright (C) 2013-2015 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check that $(am.make.keep-going) works as expected.

. test-init.sh

plan_ 120

echo AC_OUTPUT >> configure.ac

cat > Makefile.am <<'END'
# For debugging.
$(warning MAKEFLAGS[make] => '$(MAKEFLAGS)')
$(warning MFLAGS[make]    => '$(MFLAGS)')
$(warning MAKEFLAGS[env]  => '$(shell printf "%s\\n" "$$MAKEFLAGS")')
$(warning MFLAGS[env]     => '$(shell printf "%s\\n" "$$MFLAGS")')

all:
	@echo 'Default target $@ should not be called'>&2; exit 1;
k-y-plain:
	$(am.make.keep-going)
k-n-plain:
	$(am.make.keep-going) && exit 1; exit 0
k-y-recursive:
	$(MAKE) k-y-plain
k-n-recursive:
	$(MAKE) k-n-plain
END

check_make ()
{
  msg= mode=
  case $1 in
    k-[yn]) mode=$1;;
    *) fatal_ "check_run: invalid usage";;
  esac
  shift
  while test $# -gt 0; do
    case $1 in
      -M) msg=$2; shift;;
      --) shift; break;;
       *) break;;
    esac
    shift
  done
  for kind in plain recursive; do
    for opts in '' '-s'  '-s -r'; do
      r=ok
      msg2="${mode}, ${kind}"${msg:+" [$msg]"}${opts:+" ($opts)"}
      $MAKE $opts "$mode-$kind" ${1+"$@"} || r='not ok'
      result_ "$r" "$msg2"
      unset r msg2
    done
  done
  unset r msg msg2 opts mode
}

# ----------------------------------------------------------------------

$ACLOCAL    || fatal_ "aclocal failed"
$AUTOCONF   || fatal_ "autoconf failed"
$AUTOMAKE   || fatal_ "automake failed"
./configure || fatal_ "configure failed"

# ----------------------------------------------------------------------

check_make k-n

# Test against a possible regressions similar to those that affected
# detection of dry mode ("make -n").
check_make k-n TESTS="k.test k2.test"
check_make k-n TESTS="k1 k2"
check_make k-n TESTS="k1 k k2"
check_make k-n FOOFLAGS="-k -k -nkf2 k -ks --keep -k"
check_make k-n MYFLAGS="-k --keepgoing -k --keep-run -k"

# ----------------------------------------------------------------------

check_make k-y -k
check_make k-y --keep-going

# ----------------------------------------------------------------------

# Related to automake bug#12554: the "k" in "kool" used to confound
# am.make.keep-going into thinking the '-k' option had been passed.

pr='bug#12554'

mkdir kool
check_make k-n -M "$pr" -I kool
check_make k-n -M "$pr" -I kool --include keep-going
check_make k-y -M "$pr" -I kool -k
check_make k-y -M "$pr" --keep-going -I kool --include keep-going
rmdir kool

# ----------------------------------------------------------------------

# Test for when shell metacharacters or backslashes are in $(MAKEFLAGS).

check_metachars ()
{
  check_make k-n -M "metachars" "$@"
}

check_metachars MYFLAGS="-k \"k\" '-k' --keep-going -k"
check_metachars MYFLAGS='-knf2\ k\ \\k'
check_metachars MYFLAGS="(&) | ; \" \` '"
check_metachars MYFLAGS=" ' # ' "
check_metachars MYFLAGS='$(foo)'
check_metachars MYFLAGS='$(foo -k)'
check_metachars MYFLAGS='`touch bad`'
check_metachars MYFLAGS='`touch --keep-going bad`'

# ----------------------------------------------------------------------

:
