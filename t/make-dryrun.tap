#! /bin/sh
# Copyright (C) 2012-2014 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check that $(am.make.dry-run) works as expected.

. test-init.sh

plan_ $((27 * 6))

echo AC_OUTPUT >> configure.ac

cat > Makefile.am <<'END'
# For debugging.
$(warning MAKEFLAGS[make] => '$(MAKEFLAGS)')
$(warning MFLAGS[make]    => '$(MFLAGS)')
$(warning MAKEFLAGS[env]  => '$(shell printf "%s\\n" "$$MAKEFLAGS")')
$(warning MFLAGS[env]     => '$(shell printf "%s\\n" "$$MFLAGS")')

all:
	@echo "Target '$@' should never run" >&2; exit 1;

run-plain:
	$(am.make.dry-run) && exit 1; echo ok > from-run
run-recursive:
	$(MAKE) run-plain
dry-plain:
	+$(am.make.dry-run) || exit 1; echo ok > from-dry
dry-recursive:
	$(MAKE) dry-plain
END

# Each invocation of this will run 6 tests.
check_make ()
{
  msg= mode=
  case $1 in
    --dry) mode=dry;;
    --run) mode=run;;
    *) fatal_ "check_run: invalid usage";;
  esac
  shift
  while test $# -gt 0; do
    case $1 in
      -M) msg=$2; shift;;
      --) shift; break;;
       *) break;;
    esac
    shift
  done
  for kind in plain recursive; do
    for opts in '' '-s'  '-s -rR'; do
      r=ok
      msg2="${mode}, ${kind}"${msg:+" [$msg]"}${opts:+" ($opts)"}
      $MAKE $opts "$mode-$kind" ${1+"$@"} || r='not ok'
      test -f from-$mode                  || r='not ok'
      test ! -e bad                       || r='not ok'
      rm -f bad from-*                    || fatal_ "cleaning up"
      result_ "$r" "$msg2"
      unset r msg2
    done
  done
  unset msg opts mode
}

# ----------------------------------------------------------------------

$ACLOCAL    || fatal_ "aclocal failed"
$AUTOCONF   || fatal_ "autoconf failed"
$AUTOMAKE   || fatal_ "automake failed"
./configure || fatal_ "configure failed"

# ----------------------------------------------------------------------

check_make --run
check_make --run -k

# Test against known regressions.  These were especially heinous, since
# make running in normal mode was sometimes mistaken for make running
# in dry mode.

check_make --run TESTS="n1.test n2.test"
check_make --run TESTS="n1 n2" MAKEFLAGS="TESTS='n1 n2'"
check_make --run TESTS="n1 n2" MAKEFLAGS='TESTS="n1 n2"'
check_make --run FOOFLAGS="-n -n -knf2 n --none -n"
check_make --run MYFLAGS="-n --dryrun -n --dry-run -n"

check_make --run -- --print-directory -k
check_make --run -- --debug=an
check_make --run -- --print-directory --no-builtin-rules
check_make --run -- --no-print-directory
check_make --run -- --no-print-directory --no-builtin-rules

# ----------------------------------------------------------------------

check_make --dry -- -n
check_make --dry -- --dry-run --keep-going
check_make --dry -- --no-print-directory --dry-run -k

# ----------------------------------------------------------------------

# Automake bug#13760: the "n" in "none" used to confound am__make_dryrun
# into thinking the '-n' option had been passed.

pr='bug#13760'

mkdir none dry-run
check_make --run -M "$pr" -- -I none
check_make --run -M "$pr" -- -I none --include dry-run
check_make --dry -M "$pr" -- -I none -n
check_make --dry -M "$pr" -- --dry-run -I none --include dry-run
rmdir none dry-run

# ----------------------------------------------------------------------

# Test for when shell metacharacters or backslashes are in $(MAKEFLAGS).

check_metachars ()
{
  check_make --run -M "metachars" "$@"
}

check_metachars MYFLAGS="-n \"n\" '-n' --none -n"
check_metachars MYFLAGS='-knf2\ n\ \\n'
check_metachars MYFLAGS="(&) | ; \" \` '"
check_metachars MYFLAGS=" ' # ' "
check_metachars MYFLAGS='$(foo)'
check_metachars MYFLAGS='$(foo -n)'
check_metachars MYFLAGS='`touch bad`'
check_metachars MYFLAGS='`touch --dry-run bad`'

# ----------------------------------------------------------------------

:
