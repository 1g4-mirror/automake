#! /bin/sh
# Copyright (C) 2012 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test some generic Automake-provided internal macros and make functions.

am_create_testdir=empty
. ./defs || exit 1

plan_ 10

cp "$am_amdir"/header-vars.am . \
  || fatal_ "fetching makefile fragment headers-vars.am"

# Filter out Automake comments and things that would need configure
# substitutions.
LC_ALL=C $EGREP -v '(^##|=.*@[a-zA-Z0-9_]+@)' header-vars.am > defn.mk
rm -f header-vars.am

# WARNING: there are a lot of embedded tabs in this makefile.
# DO NOT "NORMALIZE" THEM TO SPACES!
cat > Makefile << 'END'
include ./defn.mk

lower = abcdefghijklmnopqrstuvwxyz
upper = ABCDEFGHIJKLMNOPQRSTUVWXYZ
digits = 0123456789
comma = ,
dollar = $$
bslash = \\

default:
	@echo Please select an explicit test; exit 1
.PHONY: default

.PHONY: test-strip-firstword
test-strip-firstword:
	test '$(call am__strip_firstword,)'                = ''
	test '$(call am__strip_firstword,1)'               = ''
	test '$(call am__strip_firstword,1 1)'             = '1'
	test '$(call am__strip_firstword,1 2)'             = '2'
	test '$(call am__strip_firstword,1 2 3 4 5 6 7 8)' = '2 3 4 5 6 7 8'
	test '$(call am__strip_firstword,  1	  2	)' = '2'

.PHONY: test-strip-lastword
test-strip-lastword:
	test '$(call am__strip_lastword,)'                 = ''
	test '$(call am__strip_lastword,1)'                = ''
	test '$(call am__strip_lastword,1 1)'              = '1'
	test '$(call am__strip_lastword,1 2)'              = '1'
	test '$(call am__strip_lastword,1 2 3 4 5 6 7 8)'  = '1 2 3 4 5 6 7'
	test '$(call am__strip_lastword,  1	  2	)' = '1'

.PHONY: test-uniq
test-uniq:
	test '$(call am__uniq,)'                = ''
	test '$(call am__uniq,1)'               = '1'
	test '$(call am__uniq,1 1)'             = '1'
	test '$(call am__uniq,1 2)'             = '1 2'
	test '$(call am__uniq,2 1)'             = '2 1'
	test '$(call am__uniq,1 2 3)'           = '1 2 3'
	test '$(call am__uniq,2 3 1)'           = '2 3 1'
	test '$(call am__uniq,1 1 1)'           = '1'
	test '$(call am__uniq,1 2 1)'           = '1 2'
	test '$(call am__uniq,2 1 1)'           = '2 1'
	test '$(call am__uniq,2 1 1)'           = '2 1'
	test '$(call am__uniq,2 2 1)'           = '2 1'
	test '$(call am__uniq,1 1 1 3 1 1 1)'   = '1 3'
	test '$(call am__uniq,3 1 1 4 1 4 1 1)' = '3 1 4'
	test '$(call am__uniq,	1   3 	1  )'   = '1 3'

.PHONY: test-strip-suffixes
test-strip-suffixes:
	test '$(call am__strip_suffixes,,)'                 = ''
	test '$(call am__strip_suffixes, 	  ,)'       = ''
	test '$(call am__strip_suffixes,, 	  )'        = ''
	test '$(call am__strip_suffixes,  	,   	)'  = ''
	test '$(call am__strip_suffixes,x,)'                = ''
	test '$(call am__strip_suffixes,x y, 	  )'        = ''
	test '$(call am__strip_suffixes,,x y)'              = 'x y'
	test '$(call am__strip_suffixes,   	 ,x y)'     = 'x y'
	test '$(call am__strip_suffixes,.c,foo.c)'          = 'foo'
	test '$(call am__strip_suffixes,.foo,a.foo b.foo)'  = 'a b'
	test '$(call am__strip_suffixes, x y, ax ay ax)'    = 'a a a'
	test '$(call am__strip_suffixes,x,ax)'              = 'a'
	test '$(call am__strip_suffixes,x,xa)'              = 'xa'
	test '$(call am__strip_suffixes,x,xx)'              = 'x'
	test '$(call am__strip_suffixes,x,xux)'             = 'xu'
	test '$(call am__strip_suffixes, .c .c++, \
	        foo.c bar.c++ baz.cxx zap.c)' = 'foo bar baz.cxx zap'
	test '$(call am__strip_suffixes, .a .b, \
	        1.a.a 2.a.b 3.b.a 4.b.b)' = '1.a 2.a 3.b 4.b'
	# Corner cases: the *first* matched suffix is stripped
	test '$(call am__strip_suffixes,.a .b,x.a.a)' = 'x.a'
	test '$(call am__strip_suffixes,.a .b,x.a.b)' = 'x.a'
	test '$(call am__strip_suffixes,.a .b,x.b.a)' = 'x.b'
	test '$(call am__strip_suffixes,.a .b,x.b.b)' = 'x.b'
	test '$(call am__strip_suffixes, .a .b.a, foo.b.a bar.a)' \
	      = 'foo.b bar'
	test '$(call am__strip_suffixes, .b.a .a, foo.b.a bar.a)' \
	      = 'foo bar'

.PHONY: test-toupper
test-toupper:
	test '$(call am__toupper,a)'  = A
	test '$(call am__toupper,A)'  = A
	test '$(call am__toupper,aba)' = ABA
	test '$(call am__toupper,a b)' = 'A B'
	test '$(call am__toupper, a B)' = ' A B'
	test '$(call am__toupper,Ab  )' = 'AB  '
	test '$(call am__toupper,A 	 B c )' = 'A 	 B C '
	test '$(call am__toupper,0)'  = 0
	test '$(call am__toupper,0d)' = 0D
	test '$(call am__toupper,@:&/?-)' = '@:&/?-'
	test '$(call am__toupper,a@B)' = A@B
	test '$(call am__toupper,zxzxzxZXZxzxzxzxzx)' = ZXZXZXZXZXZXZXZXZX
	test '$(call am__toupper,$(lower))' = '$(upper)'
	test '$(call am__toupper,$(upper))' = '$(upper)'

.PHONY: test-tolower
test-tolower:
	test '$(call am__tolower,A)'  = a
	test '$(call am__tolower,a)'  = a
	test '$(call am__tolower,ABA)' = aba
	test '$(call am__tolower,A B)' = 'a b'
	test '$(call am__tolower, A b)' = ' a b'
	test '$(call am__tolower,aB  )' = 'ab  '
	test '$(call am__tolower,a 	 b C )' = 'a 	 b c '
	test '$(call am__tolower,0)'  = 0
	test '$(call am__tolower,0D)' = 0d
	test '$(call am__tolower,@:&/?-)' = '@:&/?-'
	test '$(call am__tolower,a@B)' = a@b
	test '$(call am__tolower,ZXZXZXzxzXZXZXZXZX)' = zxzxzxzxzxzxzxzxzx
	test '$(call am__tolower,$(upper))' = '$(lower)'
	test '$(call am__tolower,$(lower))' = '$(lower)'

.PHONY: test-canonicalize
test-canonicalize:
	test '$(call am__canon,A)' = A
	test '$(call am__canon, b)' = b
	test '$(call am__canon, foo	 )' = foo
	test '$(call am__canon,$(upper)$(lower)$(digits)_)' = '$(upper)$(lower)$(digits)_'
	test '$(call am__canon,@)' = '@'
	test '$(call am__canon,%)' = '_'
	test '$(call am__canon,.&@!;)' = '__@__'
	test '$(call am__canon,')' = '_'
	test '$(call am__canon,$(dollar))' = '_'
	test '$(call am__canon,$(bslash))' = '_'
	test '$(call am__canon,$(comma))' = '_'
	test '$(call am__canon,$(bslash)$(comma))' = '__'
	test '$(call am__canon,x$(comma)@$(bslash))' = 'x_@_'

.PHONY: test-newline-1
test-newline-1:
	@echo OK > fo1$(am__newline)@touch ba1$(am__newline)-false > qu1
	test `cat fo1` = OK
	test -f ba1
	test -f qu1

my_newline = $(am__newline)
.PHONY: test-newline-2
test-newline-2:
	@echo OK > fo2$(my_newline)@touch ba2$(my_newline)-false > qu2
	test `cat fo2` = OK
	test -f ba2
	test -f qu2

command-1 = test x = x$(am__newline)
command-2 = test y = y$(my_newline)
.PHONY: test-newline-3
test-newline-3:
	$(command-1)$(command-2)touch n3
	test -f n3
END

command_ok_  am__strip_firstword        $MAKE test-strip-firstword
command_ok_  am__strip_lastword         $MAKE test-strip-lastword
command_ok_  am__uniq                   $MAKE test-uniq
command_ok_  am__test_strip_suffixes    $MAKE test-strip-suffixes
command_ok_  am__tolower                $MAKE test-tolower
command_ok_  am__toupper                $MAKE test-toupper
command_ok_  am__canon                  $MAKE test-canonicalize
command_ok_  "am__newline (1)"          $MAKE test-newline-1
command_ok_  "am__newline (2)" -D TODO  $MAKE test-newline-2
command_ok_  "am__newline (3)" -D TODO  $MAKE test-newline-3

:
