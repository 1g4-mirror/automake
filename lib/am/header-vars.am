## automake - create Makefile.in from Makefile.am
## Copyright (C) 1994-2012 Free Software Foundation, Inc.

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

VPATH = @srcdir@

## The 'all' target must be the default one, independently from the
## position it is declared in the output Makefile.
.DEFAULT_GOAL := all

## Emulate VPATH rewrites.  This uses only GNU make primitives, which
## allows us to avoid extra forks.
am__vpath_rewrite = \
  $(firstword $(wildcard $(strip $(1))) $(srcdir)/$(strip $(1)))

## We used to define this.  However, we don't because vendor makes
## (e.g., Solaris, Irix) won't correctly propagate variables that are
## defined in Makefile.  This particular variable can't be correctly
## defined by configure (at least, not the current configure), so we
## simply avoid defining it to allow the user to use this feature with
## a vendor make.
## DESTDIR =

## Tell whether make is running in "dry mode".  It is either 'true' or
## 'false', so that it can be easily used in shell code as well as in
## GNU make conditionals.
## If we run "make TESTS='snooze nap'", GNU make will export MAKEFLAGS to
## "TESTS=foo\ nap", so that the builtins operating on word-split lists
## would see a "make flag" equal to "nap" when analyzing $(MAKEFLAGS), and
## would wrongly misinterpret that as and indication that make is running
## in dry mode.  This has already happened in practice.  So we need the
## hack with $(subst \ , ...).
am__make_dryrun := \
  $(strip $(if $(strip \
    $(foreach am__v, $(subst \ ,,$(strip $(MAKEFLAGS))), \
      $(if $(or $(findstring =,$(am__v)),$(filter --%,$(am__v))),, \
        $(findstring n,$(am__v))))), \
    true, false))

# An empty strings.  It only serves to make the code readable
# in some places.
am__empty :=

# GNU make 3.80 lacks $(lastword).
## FIXME: the best thing to do here is ts
am__lastword = $(word $(words $(1)),$(1))

am__strip_firstword = $(wordlist 2,$(words $(1)),$(1))
am__strip_lastword  = $(wordlist 2,$(words $(1)),dummy $(1))

## Remove repeated elements from the given list (without reordering),
## and return the reduced list.
am__uniq = $(strip \
## If the list is empty, we have nothing to do.  Otherwise, go on.
  $(if $(strip $(1)), \
## Call the function recursively on the list of all the elements
## but the last one.
    $(call am__uniq, \
      $(call am__strip_lastword, $(1))) \
## And append the last element, unless it was already present.
      $(if $(filter $(call am__lastword, $(1)), \
                    $(call am__strip_lastword, $(1))), \
           $(am__empty), \
           $(call am__lastword,$(1)))))

## Simple memoization for recursive make variables.  It is useful for
## situations where immediate variables can't be used (due, say, to
## ordering issues with the assignments of the referenced variables),
## but where the value of the lazy variable is costly to calculate
## (e.g., a $(shell ...) call with a non-trivial command line), so that
## we can't afford to re-calculate it over and over every time the
## variable gets expanded.  Example of usage:
##
##   var1 = $(am__memoize,var1,$(shell EXPENSIVE-COMMAND-LINE))
##   var2 = $(am__memoize,var2,$(sort VERY-LONG-LIST))
##
## This API and implementation seems to work around a bug in GNU make
## (present up to and including version 3.82) which caused our first
## implementation attempts to fail:
##
##   <http://lists.gnu.org/archive/html/bug-make/2012-05/msg00013.html>
##   <https://savannah.gnu.org/patch/?7534>
##
## So please don't change this without a very good reason.
##
am__memoize = $(or $(am__memoized_value/$1),$(strip \
  $(eval am__memoized_value/$1 := $$2))$(am__memoized_value/$1))

## Some derived variables that have been found to be useful.
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)

## These are defined because otherwise make on NetBSD V1.1 will print
## (eg): $(NORMAL_INSTALL) expands to empty string.
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

## dejagnu.am uses these variables.  Some users might rely on them too.
?BUILD?build_triplet = @build@
?HOST?host_triplet = @host@
?TARGET?target_triplet = @target@
