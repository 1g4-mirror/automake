## automake - create Makefile.in from Makefile.am
## Copyright (C) 1994-2012 Free Software Foundation, Inc.

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Use $(sort) rather than $(am.util.uniq) here, because the former is
# faster on long lists, and we don't care about the order of the list
# anyway.
am.tags.files.unique = \
 $(call am.memoize,am.tags.files.unique,$(sort \
   $(foreach f,$(am.tags.files),$(call am.vpath.rewrite,$f))))

## ---- ##
## ID.  ##
## ---- ##

ID: $(am.tags.files)
	mkid -fID $(am.tags.files.unique)


## ------ ##
## TAGS.  ##
## ------ ##

ETAGS = etags
.PHONY: TAGS tags
if %?SUBDIRS%
AM_RECURSIVE_TARGETS += TAGS
RECURSIVE_TARGETS += tags-recursive
tags: tags-recursive
else !%?SUBDIRS%
tags: tags-am
endif !%?SUBDIRS%
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am.tags.files)
## We use the positional parameters to build the subdir list with
## absolute names, without the need to worry about white space in `pwd`.
	set x; \
## Exuberant Ctags wants --etags-include.
##       GNU Etags wants --include.
?SUBDIRS?	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
?SUBDIRS?	  include_option=--etags-include; \
?SUBDIRS?	else \
?SUBDIRS?	  include_option=--include; \
?SUBDIRS?	fi; \
?SUBDIRS?	list='$(SUBDIRS)'; for subdir in $$list; do \
## Do nothing if we're trying to look in '.'.
?SUBDIRS?	  if test "$$subdir" = .; then :; else \
?SUBDIRS?	    test ! -f $$subdir/TAGS || \
## Note that the = is mandatory for --etags-include.
?SUBDIRS?	      set "$$@" "$$include_option=$(CURDIR)/$$subdir/TAGS"; \
?SUBDIRS?	  fi; \
?SUBDIRS?	done; \
## Remove the 'x' we added first:
	shift; \
## Make sure we have something to run etags on.
	test -z "$(ETAGS_ARGS)$$*$(am.tags.files.unique)" || { \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $${1+"$$@"} $(am.tags.files.unique); \
	}


## --------------- ##
## vi-style tags.  ##
## --------------- ##

CTAGS = ctags
.PHONY: CTAGS ctags
if %?SUBDIRS%
AM_RECURSIVE_TARGETS += CTAGS
RECURSIVE_TARGETS += ctags-recursive
ctags: ctags-recursive
else !%?SUBDIRS%
ctags: ctags-am
endif !%?SUBDIRS%

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am.tags.files)
## Make sure we have something to run ctags on.
	test -z "$(CTAGS_ARGS)$(am.tags.files.unique)" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $(am.tags.files.unique)


## --------------- ##
## "Global tags".  ##
## --------------- ##

.PHONY: GTAGS
GTAGS:
	cd $(top_srcdir) && gtags -i $(GTAGS_ARGS) '$(abs_top_builddir)'


## ------- ##
## cscope  ##
## ------- ##

if %?TOPDIR_P%
CSCOPE = cscope
.PHONY: cscope clean-cscope
AM_RECURSIVE_TARGETS += cscope
cscope: cscope.files
	test ! -s cscope.files \
	  || $(CSCOPE) -b -q $(AM_CSCOPEFLAGS) $(CSCOPEFLAGS) -i cscope.files $(CSCOPE_ARGS)
clean-cscope:
	rm -f cscope.files
cscope.files: clean-cscope cscopelist
endif %?TOPDIR_P%

if %?SUBDIRS%
RECURSIVE_TARGETS += cscopelist-recursive
cscopelist: cscopelist-recursive
else !%?SUBDIRS%
cscopelist: cscopelist-am
endif !%?SUBDIRS%

cscopelist-am: $(am.tags.files)
	list='$(am.tags.files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files


## ---------- ##
## Cleaning.  ##
## ---------- ##

am.clean.dist.f += TAGS ID GTAGS GRTAGS GSYMS GPATH tags
if %?TOPDIR_P%
am.clean.dist.f += cscope.out cscope.in.out cscope.po.out cscope.files
endif %?TOPDIR_P%
