#!/usr/bin/perl
use strict;
use Lexer;
use Tree;
use ParserTable;

my $debug = 0;

#Input file for conversion
my $data;
open ( $data, "<input.txt" );

#Stores the list of tokens generated by lexer.
my @tokens; 

while ( <$data> )
{
	push @tokens, lex($_);
}
if( $debug )
{
	print "Lexer Output\n";
	foreach my $token ( @tokens )
	{
		print join(" ", @{$token}), "\n";
	}
}

push @tokens, ["end"];
my @stack = (0);
print "Parser Output\n" if $debug;

while ( @stack )
{
	if($stack[-1] == $ParserTable::accept)
	{
		print "Complete\n";
		printgraph( $stack[-4] );
		last;
	}
	my @curr_token = @{ $tokens[0] };	
	if(my $val = $ParserTable::table[ $stack[-1] ]{ $curr_token[0] })
	{
		push @stack, \@curr_token, $val;
		shift @tokens;
	}
	elsif(my $val = $ParserTable::table[ $stack[-1] ]{ reduce })
	{
		my @val1 = @$val;
		my @param;
		for(my $i = 1; $i <= 2 * $val1[0]; $i++)
		{
			if($i%2 == 0)
			{
				$val = pop @stack;
				push @param,$val;
			}
			else
			{
				pop @stack;
			}
		}
		@param = reverse @param;
		push @stack, $val1[1]->( @param );
		push @stack, $ParserTable::table[ $stack[-2] ]{ $stack[-1]->{ name }};
	}
	else
	{
		die "Unexpected Token ". @curr_token."\n";
	}
	print @stack, "\n" if $debug;
}