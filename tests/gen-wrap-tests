#! /bin/sh
# Generate wrap-tests.am.
#
# Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e
set -u

MAKE=${MAKE-make}
PERL=${PERL-perl}

tests=`$MAKE -s -f list-of-tests.mk print-list-of-tests` \
  && tests=`echo $tests` && test -n "$tests" \
  || { echo "$0: cannot get list of tests" >&2; exit 1; }

st=0
for tst in $tests; do
  test -f $tst || { echo "$0: test \`$tst' not found" >&2; st=1; }
done
test $st -eq 0 || exit 1

add_wrapper_type () { wrapper_type_list="$wrapper_type_list $*"; }
wrapper_type_list="" # Avoid interferences from the environment.

#
# For each test script in the Automake testsuite that itself tests features
# of the TESTS automake interface, define a sibling test that does likewise,
# but with the option `parallel-tests' enabled.
#
# A test is considered a candidate for sibling-generation if any
# Makefile.am generated by it define the TESTS variable.
#
# Individual tests can prevent the creation of such a sibling by explicitly
# setting the `$parallel_tests' variable to either "yes" or "no".  The
# rationale for this is that if the variable is set to "yes", the test
# already uses the `parallel-tests' option, so that a sibling would be just
# a duplicate; while if the variable is set to "no", the test doesn't
# support, or is not meant to run with, the `parallel-tests' option, and
# forcing it to do so in the sibling would likely cause a spurious failure.
#
get_list_for_pt ()
{
  { grep -l '^TESTS *=' $*; grep -l ' TESTS *=' $*; } \
    | LC_ALL=C sort -u \
    | while read tst; do
        grep '^[^#]*parallel-tests' $tst >/dev/null && continue
        grep "parallel_tests=" $tst >/dev/null && continue
        echo $tst
      done
}
defines_for_pt='--define parallel_tests "yes"'
add_wrapper_type "pt"

#
# For each test script in the Automake testsuite that tests features of
# one or more automake-provided shell script from the `lib/' subdirectory
# by running those scripts directly (i.e., not thought make calls and
# automake-generated makefiles), define a sibling test that does likewise,
# but running the said script with the configure-time $SHELL instead of
# the default system shell /bin/sh.
#
# A test is considered a candidate for sibling-generation if it calls the
# `get_shell_script' function anywhere.
#
# Individual tests can prevent the creation of such a sibling by explicitly
# setting the `$test_prefer_config_shell' variable to either "yes" or "no".
# The rationale for this is that if the variable is set to "yes", the test
# already uses $SHELL, so that a sibling would be just a duplicate; while
# if the variable is set to "no", the test doesn't support, or is not meant
# to use, $SHELL to run the script under testing, and forcing it to do so
# in the sibling would likely cause a spurious failure.
#
get_list_for_cs ()
{
  { grep -l '^get_shell_script ' $*; grep -l ' get_shell_script ' $*; } \
    | LC_ALL=C sort -u \
    | while read tst; do
        grep "test_prefer_config_shell=" $tst >/dev/null || echo $tst
      done
}
defines_for_cs='--define test_prefer_config_shell "yes"'
add_wrapper_type "cs"

# Tests on tap support should be run with both the perl and awk
# implementations of the TAP driver.
get_list_for_pltap ()
{
  {
    grep -l '[ /]tap-setup\.sh'  $*;
    grep -l '^fetch_tap_driver$' $*;
    grep -l '^fetch_tap_driver ' $*;
    grep -l ' fetch_tap_driver$' $*;
    grep -l ' fetch_tap_driver ' $*;
  } | LC_ALL=C sort -u \
    | while read tst; do
        grep "am_tap_implementation=" $tst >/dev/null || echo $tst
      done
}
defines_for_pltap='--define am_tap_implementation "perl"'
add_wrapper_type "pltap"

echo '## Generated by gen-wrapped-tests.  DO NOT EDIT.'
echo 'wrap_TESTS ='
echo 'wrap_LOGS ='
echo

# NOTE: the following is not really right, since cannot compose wrapping
# of tests matching more than one condition.  Still, there should be no
# such test at the moment, so the limitation is acceptable.  Also, if
# this invariant stops holding, the check `check-no-repeated-test-name'
# in Makefile.am will start failing.

for wtype in $wrapper_type_list; do
  eval defines=\${defines_for_$wtype}
  get_list_for_$wtype $tests \
    | wtype="$wtype" defines="$defines" $PERL -w -e '
        use strict;
        use warnings FATAL => "all";

        my $wtype = $ENV{"wtype"};

        # Suffix for a generated wrapped test, from the suffix of a
        # hand-written test.
        sub gen_suffix ($) { return $_[0] . "_" . $wtype; }

        HANDLE_SUFFIX :
        {
          my %have_suffix;
          sub handle_if_new_suffix ($)
          {
            my $suf = shift;
            return
              if $have_suffix{$suf};
            $have_suffix{$suf} = 1;
            print "\n";
            print "TEST_EXTENSIONS += ." . gen_suffix ($suf) . "\n";
            my $uc_orig_suf = uc ($suf);
            my $uc_wrap_suf = uc ($suf) . "_" . uc ($wtype);
            print <<EOF;

${uc_wrap_suf}_LOG_DRIVER = \\
  \$(${uc_orig_suf}_LOG_DRIVER)

AM_${uc_wrap_suf}_LOG_DRIVER_FLAGS = \\
  \$(AM_${uc_orig_suf}_LOG_DRIVER_FLAGS) \\
  \$(${uc_orig_suf}_LOG_DRIVER_FLAGS)

${uc_wrap_suf}_LOG_COMPILER = \\
  \$(LOG_COMPILER) \$(srcdir)/wrap-tests.sh \\
  --type $wtype $ENV{"defines"}

EOF
         }
       }
    while (<>)
      {
        chomp;
        if (/^(.*)\.(test|tap)$/)
          {
            my ($bas, $suf) = ($1, $2);
            handle_if_new_suffix ($suf);
            print "wrap_TESTS += $bas-w." . gen_suffix ($suf) . "\n";
            print "wrap_LOGS += $bas-w.log\n";
            print "$bas-w.log: $bas.$suf\n";
          }
        else
          {
            die "invalid test name `$_`";
          }
      }
    '
done
