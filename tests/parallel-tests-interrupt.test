#! /bin/sh
# Copyright (C) 2011 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check that the parallel-tests driver removed incomplete log files
# when interrupt upon some signal.  This test is definitely too hacky,
# but we couldn't find a better way to deal with inter-processes
# signals and the whole process-synchronization mess.

parallel_tests=yes
. ./defs || Exit 1

cat >> configure.in << 'END'
AC_OUTPUT
END

cat > Makefile.am << 'END'
TESTS = foo.test
## Ugly, but required by foo.test.  See below.
TEST_LOG_COMPILER = echo $$$$ > pid && exec 9>&2 && $(SHELL) -x
END

# This is hacky and ugly, but has the great advantage of avoiding us a lot
# of pain with background processes and related synchronization issues.
cat > foo.test << 'END'
#!/bin/sh
exec 2>&9
echo "foo is starting to run"
ls -l >&2
cat foo.log-t >&2 || : > fail
grep '^foo is starting to run$' foo.log-t >&2 || : > fail
cat pid >&2 || : > fail
kill -$signum `cat pid` || : > fail
END
chmod a+x foo.test

$ACLOCAL
$AUTOCONF
$AUTOMAKE -a

./configure

# The only signals that can be trapped portable are 1 "SIGHUP",
# 2 "SIGINT", 13 "SIGPIPE" and 15 "SIGTERM".
trapped_signals='1 2 13 15'

for signum in $trapped_signals; do
  rm -f pid fail *.log *.log-t
  env signum=$signum $MAKE check && { ls -l; Exit 1; }
  ls -l
  cat foo.log-t || :
  cat foo.log || :
  cat test-suite.log || :
  test -f fail && Exit 1
  test -f foo.log-t && Exit 1
  test -f foo.log && Exit 1
done

:
