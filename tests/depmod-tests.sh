#! /bin/sh
# Copyright (C) 2011 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Driver script to generate and run tests checking that dependency
# tracking in various flavours works with VPATH builds.
#
# This script fulfills a threefold role:
#   1. It is called to generate a Makefile.am snippet, containing the
#      definition of proper lists of tests.
#   2. It is called to set up a directory containing some common data
#      files and autotools-generated files used by the aforementioned
#      tests (this is done for speed reasons only).
#   3. It is called to properly run those tests, one at a time.
#
# Examples of reported failures follows ...

# <http://lists.gnu.org/archive/html/automake-patches/2011-04/msg00028.html>
#
# Here's the bug: makedepend will prefix VPATH to the object file name,
# thus the second make will invoke depcomp with object='../../src/foo.o',
# causing errors such as:
# touch: cannot touch `../../src/.deps/foo.TPo': No such file or directory
# makedepend: error:  cannot open "../../src/.deps/foo.TPo"
# ../../depcomp: line 560: ../../src/.deps/foo.TPo: No such file or directory

# <http://debbugs.gnu.org/cgi/bugreport.cgi?bug=8473>
# <http://lists.gnu.org/archive/html/automake-patches/2011-04/msg00079.html>
#
# Here's the bug: hp depmode will prefix VPATH to the object file name,
# thus the second gmake will invoke depcomp with object='../../src/foo.o',
# causing errors such as (broken on multiple lines for clarity):
#   cpp: "", line 0: error 4066: Cannot create
#        "../../gllib/.deps/nonblocking.TPo" file for
#        "-M../../gllib/.deps/nonblocking.TPo" option.
#        (No such file or directory[errno=2])

# Be more Bourne compatible (snippet copied from `tests/defs').
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
fi

set -e

case $# in
  0) echo "$0: missing argument" >&2; exit 99;;
  1) ;;
  *) echo "$0: too many arguments" >&2; exit 99;;
esac

case $1 in
  --generate-makefile|--generate-data)
    action=`expr x"$1" : x'--\(.*\)'`
    ;;
  depcomp-*.depmod|*/depcomp-*.depmod)
    action=run-test
    depmode=`expr /"$1" : '.*/depcomp-\(.*\)\.depmod'`
    ;;
  *)
    echo "$0: invalid argument '$1'" >&2
    exit 99
    ;;
esac

# Helper subroutines for creation of input data files.

create_input_data ()
{
  mkdir src src/sub

  unindent > configure.in << 'END'
    AC_INIT([depcomp], [1.0])
    AM_INIT_AUTOMAKE
    AC_CONFIG_FILES([Makefile src/Makefile])
    AC_PROG_CC
    AM_PROG_CC_C_O
    AC_OUTPUT
END

  echo 'SUBDIRS = src' > Makefile.am

  unindent > src/Makefile.am << 'END'
    AUTOMAKE_OPTIONS = subdir-objects
    bin_PROGRAMS = foo
    foo_SOURCES = foo.c foo.h sub/subfoo.c
END

  echo 'extern int subfoo (void);' > src/foo.h

  unindent > src/foo.c << 'END'
    #include "foo.h"
    int main (void)
    {
      return subfoo ();
    }
END

  # We include subfoo only to be sure that we don't remove too much
  # from the object file name.
  unindent > src/sub/subfoo.c << 'END'
    #include "foo.h"
    int subfoo (void)
    {
      return 0;
    }
END

  $ACLOCAL
  $AUTOCONF
  $AUTOMAKE -a

  # Sanity check: make sure the cache variable we force is used
  # by configure.
  grep am_cv_CC_dependencies_compiler_type configure

  : > success
}

# Usage: get_depmodes DEPCOMP-FILE PROGRAM-NAME
get_depmodes ()
{
  # Keep this in sync with the contents of depend.m4.
  all_depmodes=`sed -n 's/^#*\([a-zA-Z0-9]*\))$/\1/p' < "$1" \
                  | grep -v '^none$'` \
    && : Turn newlines and tabs into spaces, and strip extra whitespace. \
    && all_depmodes=`echo $all_depmodes` \
    && test -n "$all_depmodes" || {
      echo "$2: failed to extract list of valid depmodes from '$1'" >&2
      exit 99
    }
}

if test x"$action" = x"generate-makefile"; then
  # We must generate a makefile fragment on stdout.  It must refer
  # to all tests at once, hence the loop below.
  get_depmodes ../lib/depcomp
  echo '## Generated by depmode-tests.sh.  DO NOT EDIT!'
  echo 'depmod_tests ='
  for depmode in $all_depmodes; do
    echo "depmod_tests += depcomp-$depmode.depmod"
  done
  exit 0
fi

# We'll need the full setup provided by `tests/defs'.  Temporarily disable
# the errexit flag, since the setup code might not be prepared to deal
# with it.  Also pre-set `$me' for `tests/defs', so that different calls
# to `depmod-tests.sh' won't try to use the same temporary directory.
# The actual tests require a C compiler, so require it for them; but do
# not require it when generating data, as it's not needed then.
if test x"$action" = x"generate-data"; then
  me=depmod-data
else
  required=cc
  me=depcomp-$depmode
fi
set +e
. ./defs || Exit 99
set -e

# The directory set up by the `generate-data' action should contain all
# the files we need.  So remove the other files created by ./defs.  And
# check we really are in a temporary `*.dir' directory in the build tree,
# since the last thing we want is to remove some random user files!
test -f ../defs-static && test -f ../defs || Exit 99
case `pwd` in *.dir);; *) Exit 99;; esac
rm -f *

if test x"$action" = x"generate-data"; then
  # We must *not* remove the test directory, since its contents must be
  # used by following dependent tests.
  keep_testdirs=yes
  create_input_data
  Exit 0
fi

get_depmodes "$top_testsrcdir/lib/depcomp" "$me"
case " $all_depmodes " in
  *" $depmode "*) ;;
  *) echo "$me: invalid depmode '$depmode'" >&2; exit 99;;
esac

###  If we are still here, we have to run a test ...

test -f ../depmod-data.dir/success || {
  echo "$me: setup by depmod-data.test failed" >&2
  Exit 99
}

../depmod-data.dir/configure am_cv_CC_dependencies_compiler_type=$depmode

# Do not error out with the first make, as the depmode we've forced might
# not actually work, but we have overridden the _AM_DEPENDENCIES tests.
$MAKE || skip_ "forced depmode '$depmode' doesn't work"

# We must clean and rebuild, as the actual error only happens the second
# time the objects are built because 'depcomp' has silently messed up the
# .Po files the first time.
$MAKE clean

$MAKE >out 2>&1 || { cat out; Exit 1; }
cat out
grep 'src/[._]deps' out && Exit 1

:
