#! /bin/sh
# Copyright (C) 2011 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# parallel-tests harness: check that a special ":test-result:END"
# directive prevents the code generating the testsuite summary and
# the test-suite.log from parsing the rest of the log file.

parallel_tests=yes
. ./defs || Exit 1

cat >> configure.in << 'END'
AC_OUTPUT
END

cat > Makefile.am << 'END'
TEST_LOG_DRIVER = ./dummy-driver
TESTS = a.test b.test c.test d.test
END

cat > dummy-driver <<'END'
#!/bin/sh
set -e
while test $# -gt 0; do
  case $1 in
    --log-file) log_file=$2; shift;;
    --test-name|--expect-failure|--color-tests|--enable-hard-errors) shift;;
    --) shift; break;;
     *) echo "$0: invalid option/argument: '$1'" >&2; exit 2;;
  esac
  shift
done
cp $1 $log_file
END
chmod a+x dummy-driver

cat > a.test <<'END'
PASS: a.test
:test-result:END
:test-result:FAIL
END

cat > b.test <<END
PASS: b.test
:test-result:PASS
:test-result:END
:test-result:FAIL
:test-result:ERROR
END

cat > c.test <<END
PASS: c.test
:test-result:SKIP
:test-result: END$tab  $tab$tab
:test-result:XPASS
END

cat > d.test <<END
PASS: d.test
:test-result:PASS
:test-result:PASS
:test-result: $tab  END.
:test-result:FAIL
END

$ACLOCAL
$AUTOCONF
$AUTOMAKE

./configure

$MAKE check >output 2>&1 || { cat output; Exit 1; }
cat output
cat a.log; cat b.log; cat c.log; cat d.log # For debugging.

$EGREP '^(All)? 3 tests? passed' output
grep '^(1 test.* not run' output
$EGREP 'did not behave|unexpected pass' output && Exit 1

:
