# -*- shell-script -*-
# @configure_input@
#
# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
# 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation,
# Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Defines and minimal setup for Automake testing environment.

# IMPORTANT NOTES AND REQUIREMENTS
#   - Multiple inclusions of this file should be idempotent.
#   - This code has to be 'set -e' clean.
#   - This file should execute correctly with any system's /bin/sh
#     shell, not only with configure-time detected $CONFIG_SHELL.

# Be more Bourne compatible.
# (Snippet inspired to configure's initialization in Autoconf 2.64)
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
  # If Zsh is not started directly in Bourne-compatibility mode, it has
  # some incompatibilities in the handling of `$0' that conflict with
  # our usage: i.e., `$0' inside a file sourced with the `.' builtin is
  # temporarily set to the name of the sourced file.
  # Work around this when possible, otherwise abort the script.
  # Note that a bug in some versions of Zsh prevents us from resetting $0
  # in a sourced script, so the use of $argv0.  For more info see:
  #  <http://www.zsh.org/mla/workers/2009/msg01140.html>
  # Note: the apparently useless 'eval' below are needed by at least
  # dash 0.5.2, to prevent it from bailing out with an error like
  # "Syntax error: Bad substitution"
  if eval '[[ "$0" = *."test" ]]'; then
    # Good, FUNCTION_ARGZERO option was already off when this file was
    # sourced.  Thus we've nothing to do.
    argv0=$0
  elif eval 'test -n "${functrace[-1]}"'; then
    # FUNCTION_ARGZERO option was on, but we have a easy workaround.
    eval 'argv0=${functrace[-1]%:*}'
  else
    # Give up.
    echo "$0: cannot determine the path of running test script" >&2
    echo "$0: test was running with Zsh version $ZSH_VERSION" >&2
    echo "$0: did you enable the NO_FUNCTION_ARGZERO option?" >&2
    exit 99
  fi
else
  argv0=$0
  # Avoid command substitution failure, for Tru64 sh -e and instspc*.test.
  case `(set -o) 2>/dev/null || :` in *posix*) set -o posix;; esac
fi

# Check that the environment is properly sanitized.
# Having variables exported to the empty string is OK, since our code
# treats such variables as if they were unset.
for var in \
  me \
  required \
  using_tap \
  parallel_tests \
  am_create_testdir \
  am_tap_implementation \
  test_prefer_config_shell \
  original_AUTOMAKE \
  original_ACLOCAL \
; do
  if eval "test x\"\$$var\" != x" && env | grep "^$var=" >/dev/null; then
    echo "$argv0: variable \`$var' is set in the environment:" \
         "this is unsafe" >&2
    exit 99
  fi
done
unset var

# See whether the current test script is expected to use TAP or not.
# Use a sensible default, while allowing the scripts to override this
# check.
if test -z "$using_tap"; then
  case $argv0 in *.tap) using_tap=yes;; *) using_tap=no;; esac
fi

testsrcdir='@abs_srcdir@'
top_testsrcdir='@abs_top_srcdir@'
testbuilddir='@abs_builddir@'
testprefix='@prefix@'

APIVERSION='@APIVERSION@'
PATH_SEPARATOR='@PATH_SEPARATOR@'

host_alias=${host_alias-'@host_alias@'}; export host_alias
build_alias=${build_alias-'@build_alias@'}; export build_alias

# Make sure we override the user shell.
SHELL='@SHELL@'; export SHELL
# User can override various tools used.
test -z "$PERL" && PERL='@PERL@'
test -z "$MAKE" && MAKE=make
test -z "$AUTOCONF" && AUTOCONF="@am_AUTOCONF@"
test -z "$AUTOM4TE" && AUTOM4TE="@am_AUTOM4TE@"
test -z "$AUTORECONF" && AUTORECONF="@am_AUTORECONF@"
test -z "$AUTOHEADER" && AUTOHEADER="@am_AUTOHEADER@"
test -z "$AUTOUPDATE" && AUTOUPDATE="@am_AUTOUPDATE@"
test -z "$MISSING" && MISSING=$top_testsrcdir/lib/missing

# Use -Werror because this also turns some Perl warnings into error.
# Tests for which this is inappropriate should use -Wno-error.
# Tests who want complete control over aclocal command-line options
# should use $original_ACLOCAL.
# Note: the first `test -z' conditional below is to ensure defs-static
# really remains idempotent.
if test -z "$original_ACLOCAL"; then
  original_ACLOCAL=${ACLOCAL-"aclocal-$APIVERSION"}
fi
test -z "$ACLOCAL" && ACLOCAL="aclocal-$APIVERSION -Werror"
# Extra flags to pass to aclocal before all other flags added by this script.
ACLOCAL_TESTSUITE_FLAGS=''; export ACLOCAL_TESTSUITE_FLAGS

# See how Automake should be run.  We put --foreign as the default
# strictness to avoid having to create lots and lots of files.  A test
# can override this by specifying a different strictness.  Use -Wall
# -Werror by default.  Tests for which this is inappropriate (e.g. when
# testing that a warning is enabled by a specific switch) should use
# -Wnone or/and -Wno-error.  Tests who want complete control over
# automake command-line options should use $original_AUTOMAKE.
# Note: the first `test -z' conditional below is to ensure defs-static
# really remains idempotent.
if test -z "$original_AUTOMAKE"; then
  original_AUTOMAKE=${AUTOMAKE-"automake-$APIVERSION"}
fi
test -z "$AUTOMAKE" && AUTOMAKE="automake-$APIVERSION --foreign -Werror -Wall"

# POSIX no longer requires 'egrep' and 'fgrep',
# but some hosts lack 'grep -E' and 'grep -F'.
EGREP='@EGREP@'
FGREP='@FGREP@'

# No all versions of Tex support `--version', so we use a configure
# check to decide if tex is available.  This decision is embodied in
# this variable.
TEX='@TEX@'

# Whether $SHELL has working 'set -e' with exit trap.
sh_errexit_works='@sh_errexit_works@'

# The amount we should wait after modifying files depends on the platform.
# For instance, Windows '95, '98 and ME have 2-second granularity
# and can be up to 3 seconds in the future w.r.t. the system clock.
sleep='sleep @MODIFICATION_DELAY@'

# An old timestamp that can be given to a file, in "touch -t" format.
# The time stamp should be portable to all file systems of interest.
# Just for fun, choose the exact time of the announcement of the GNU project
# in UTC; see <http://www.gnu.org/gnu/initial-announcement.html>.
old_timestamp=198309271735.59

# Make our wrapper scripts accessible by default.  And avoid to uselessly
# extend $PATH multiple times if this file is sourced multiple times.
case $PATH in
  "$testbuilddir$PATH_SEPARATOR"*) ;;
  *) PATH="$testbuilddir$PATH_SEPARATOR$PATH";;
esac
export PATH
