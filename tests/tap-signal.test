#! /bin/sh
# Copyright (C) 2011 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# TAP support:
#  - a test script terminated by a signal causes an hard error

parallel_tests=yes
. ./defs || Exit 1

echo TESTS = > Makefile.am
for sig in 1 2 13 15; do
  unindent > signal-$sig.test <<END
    #!/bin/sh
    echo 1..1
    echo ok 1
    kill -$sig \$\$
    echo "Bail out! \$0 not killed?"
END
  echo TESTS += signal-$sig.test >> Makefile.am
done

chmod a+x *.test

. "$testsrcdir"/tap-setup.sh || fatal_ "sourcing tap-setup.sh"

# Solaris /bin/sh, when killed with a SIGTERM or SIGINT signal, can end up
# exiting with exit status 208, instead of leaving the correct wide exit
# status to the parent.  See:
#   <http://dbaspot.com/shell/396118-bourne-shell-exit-code-term.html>
# We need to detect and work around this incompatibility.

if /bin/sh -c 'kill -2 $$'; then
  fatal_ "/bin/sh cannot kill itself"
elif test $? -eq 208; then
  have_solaris_bug=yes
else
  have_solaris_bug=no
fi

signal_caught ()
{
  numeric=$1
  symbolic=$2
  sig_re="((SIG)?$symbolic|$numeric)"
  tst_re="signal-$numeric\\.test"
  if $EGREP "^ERROR: $tst_re - terminated by signal $sig_re$" stdout; then
    return 0
  elif test $have_solaris_bug = yes; then
    case $symbolic in
      INT|TERM) $EGREP "^ERROR: $tst_re - exited with status 208$" stdout;;
             *) return 1;;
    esac
  else
    return 1
  fi
}

all_signals_caught ()
{
  # This are the only signals that are portably trappable.
  signal_caught  1 HUP
  signal_caught  2 INT
  signal_caught 13 PIPE
  signal_caught 15 TERM
}

$MAKE check >stdout && { cat stdout; Exit 1; }
cat stdout
count_test_results total=8 pass=4 fail=0 xpass=0 xfail=0 skip=0 error=4
all_signals_caught

echo 'TEST_LOG_DRIVER_FLAGS = --ignore-exit' >> Makefile
$MAKE check >stdout || { cat stdout; Exit 1; }
cat stdout
count_test_results total=4 pass=4 fail=0 xpass=0 xfail=0 skip=0 error=0

:
