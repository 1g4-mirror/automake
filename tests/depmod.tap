#! /bin/sh
# Copyright (C) 2011 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check that dependency tracking in various flavours works with VPATH
# builds.  Examples of reported failures follows ...

# <http://lists.gnu.org/archive/html/automake-patches/2011-04/msg00028.html>
#
# Here's the bug: makedepend will prefix VPATH to the object file name,
# thus the second make will invoke depcomp with object='../../src/foo.o',
# causing errors such as:
# touch: cannot touch `../../src/.deps/foo.TPo': No such file or directory
# makedepend: error:  cannot open "../../src/.deps/foo.TPo"
# ../../depcomp: line 560: ../../src/.deps/foo.TPo: No such file or directory

# <http://debbugs.gnu.org/cgi/bugreport.cgi?bug=8473>
# <http://lists.gnu.org/archive/html/automake-patches/2011-04/msg00079.html>
#
# Here's the bug: hp depmode will prefix VPATH to the object file name,
# thus the second gmake will invoke depcomp with object='../../src/foo.o',
# causing errors such as (broken on multiple lines for clarity):
#   cpp: "", line 0: error 4066: Cannot create
#        "../../gllib/.deps/nonblocking.TPo" file for
#        "-M../../gllib/.deps/nonblocking.TPo" option.
#        (No such file or directory[errno=2])
#

# <http://lists.gnu.org/archive/html/automake-patches/2011-04/msg00140.html>
# <http://lists.gnu.org/archive/html/automake-patches/2011-05/msg00019.html>
#
# A partial failure of an earlier version of this test; some bad
# post-processing of the `*.Po' files led to the following broken
# contents of `src/sub/.deps/subfoo.Po':
#  > sub/subfoo.o: ../../depmod-data.dir/src/sub/subfoo.c \
#  >   ../../depmod-data.dir/src/foo.h
#  > ../../depmod-data.dir/src/sub/subfoo.c \:
#  >   ../../depmod-data.dir/src/foo.h:
# which caused make to die with an error like:
#  "sub/.deps/subfoo.Po:3: *** missing separator.  Stop."

# Per each valid depmode three kinds of VPATH, and per each of them
# a test on "./configure" and one on "make & remake"; so there are
# 17 * 3 * 2 = 102.
planned=102
required=cc
. ./defs || Exit 99

ocwd=`pwd` || fatal_ "cannot get current working directory"

# Keep this in sync with the contents of depend.m4.
all_depmodes=`\
  sed -n 's/^#*\([a-zA-Z0-9]*\))$/\1/p' < "$top_testsrcdir/lib/depcomp" \
    | grep -v '^none$'` \
  && : Turn newlines and tabs into spaces, and strip extra whitespace. \
  && all_depmodes=`echo $all_depmodes` \
  && test -n "$all_depmodes" \
  || fatal_ "can't extract list of valid depmodes"

srctree=depmod-1.0
mkdir $srctree
mv missing install-sh depcomp configure.in $srctree
cd $srctree

mkdir src src/sub

cat >> configure.in << 'END'
AC_CONFIG_FILES([src/Makefile])
AC_PROG_CC
AM_PROG_CC_C_O
AC_OUTPUT
END

echo 'SUBDIRS = src' > Makefile.am

cat > src/Makefile.am << 'END'
AUTOMAKE_OPTIONS = subdir-objects
bin_PROGRAMS = foo
foo_SOURCES = foo.c foo.h sub/subfoo.c
END

echo 'extern int subfoo (void);' > src/foo.h

cat > src/foo.c << 'END'
#include "foo.h"
int main (void)
{
  return subfoo ();
}
END

# We include subfoo only to be sure that we don't remove too much
# from the object file name.
cat > src/sub/subfoo.c << 'END'
#include "foo.h"
int subfoo (void)
{
  return 0;
}
END

$ACLOCAL
$AUTOCONF
$AUTOMAKE -a

# Sanity check: make sure the cache variable we force is used
# by configure.
grep am_cv_CC_dependencies_compiler_type configure \
  || fatal_ "configure lacks required cache variable"

cd "$ocwd" || fatal_ "cannot chdir back to top directory"

longpath=this-is/a-path/which-have/quite-a/long_long_name
$srctree/install-sh -d $longpath || fatal_ "cannot create long path"
cp -pR $srctree/* $longpath || fatal_ "cannot populate long path"
cp -pR $srctree/* . || fatal_ "cannot populate top-level directory"

for vpath in simple long absolute; do
  for depmode in $all_depmodes; do
    case $vpath in
      simple)
        srcdir=..;;
      long)
        srcdir=../$longpath;;
      absolute)
        srcdir=$ocwd;;
      *)
        fatal_ "bad \$vpath value '$vpath'";;
    esac

    pfx="$depmode [$vpath VPATH]"

    mkdir $depmode-$vpath.d
    cd $depmode-$vpath.d

    command_ok_ "$pfx configure" \
      "$srcdir"/configure am_cv_CC_dependencies_compiler_type=$depmode

    # Do not fail with the first call to make fails, as the depmode
    # we've forced might not actually work, but we have overridden the
    # _AM_DEPENDENCIES tests.
    if $MAKE; then
      # We must clean and rebuild, as the actual error only happens the
      # second time the objects are built because 'depcomp' has silently
      # messed up the .Po files the first time.
      r=ok
      $MAKE clean \
        && { e=0; $MAKE >output 2>&1 || e=1; cat output; test $e -eq 0; } \
        && { if grep 'src/[._]deps' output; then false; else :; fi; } \
        || r='not ok'
      result_ "$r" "$pfx make & remake"
    else
      skip_ -r "can't force depmode" "$pfx make & remake"
    fi

    cd "$ocwd" || fatal_ "cannot chdir back to top directory"

  done
done

:
