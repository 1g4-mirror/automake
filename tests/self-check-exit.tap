#! /bin/sh
# Copyright (C) 2011 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Sanity check for the automake testsuite.
# Check that, in case of failing commands, the correct exit status is
# passed to the exit trap installed by the `./defs' script.
# Also check that the `errexit' shell flag is active.

am_create_testdir=no
. ./defs || Exit 99

plan_ 34

AM_TESTS_REEXEC=no; export AM_TESTS_REEXEC

init='. ./defs; stderr_fileno_=2; unset am_explicit_skips'

for st in 1 2 3 4 5 77 99 126 127 128 129 130 255; do
  for ex in "Exit $st" "sh -c 'exit $st'"; do
    rc=0; $SHELL -c  "$init; $ex; :" || rc=$?
    command_ok_ "$ex" test $rc -eq $st
  done
done

for sig in 1 2 13 15; do
  if test $sig -eq 2; then
    # Some Korn shells might otherwise get a spurious SIGINT
    # signal when one is sent to the child $SHELL.
    trap : 2
  fi
  rc=0; $SHELL -c  "$init; kill -$sig \$\$; :" || rc=$?
  if test $sig -eq 2; then
    # Reset default SIGINT handler as portably as possible.
    trap 2 || trap - 2
  fi
  if test x"$sh_errexit_works" = x"yes"; then
    # The exit trap should turn into an hard errors any failure
    # caused by signals.
    command_ok_ "kill -$sig" test $rc -eq 99
  else
    # The exit trap is not installed, so that the shell should exit
    # with status 128+n when receiving signal number n.  But don't
    # be too strict in the check, as POSIX only says that "The exit
    # status of a command that terminated because it received a
    # signal shall be reported as greater than 128".
    command_ok_ "kill -$sig" test $rc -gt 128
  fi

done

: Non-existent program.
# Solaris 10 /bin/sh erroneously exit with success right away when the
# following three conditions are met at the same time:
#   1. the `errexit' flag is active,
#   2. an exit trap is installed, and
#   3. a non-existing command is issued.
# Note that the non-existent command is issued as the last command to
# the shell in the next line; this is deliberate.
if $SHELL -c 'set -e; trap "exit \$?" 0; non-existent-program'; then
  maybe_todo=TODO reason="known Solaris /bin/sh bug"
else
  maybe_todo="" reason=""
fi
if $SHELL -c  "$init; non-existent-program; :"; then
  r='not ok'
else
  r='ok'
fi
result_ "$r" -D "$maybe_todo" -r "$reason" "command not found"

: Non-executable command.
test -f Makefile && test ! -x Makefile || \
  framowork_failure_ "no proper Makefile in the current directory"
rc=0; $SHELL -c  "$init; ./Makefile; :" || rc=$?
command_ok_ "permission denied" test $rc -gt 0

: Syntax errors in the test code.
rc=0; $SHELL -c  "$init; if :; then" || rc=$?
command_ok_ "syntax error 1" test $rc -gt 0
rc=0; $SHELL -c  "$init; fi" || rc=$?
command_ok_ "syntax error 2" test $rc -gt 0

:
