This file lists the major changes and differences between mainstream
Automake and Automake-NG.  Be aware that there is likely a plethora
of other minor differences and incompatibilities *not* listed here.

Automatic dependency tracking support 
=====================================

* The generated Makefile.in files use "-include", not "include", to
  read the '.Po' files containing automatically computed dependency
  information.

* We unconditionally assume that the "include" and "-include"
  directives can be used in the generated Makefiles.  Accordingly,
  the internal m4 macro 'AM_MAKE_INCLUDE' and AC_SUBST'd variables
  'am__include' and 'am__quote' have been removed.

* The makefile fragments files containing automatically computed
  dependency information are created at make runtime by Makefile
  recipes, not at configure time by config.status.  Accordingly,
  the special config.status argument 'depfiles' is not supported
  anymore.

Silent rules
============

* The silent-rules support unconditionally assumes that nested variables
  expansion are supported.  Accordingly, the AC_SUBST'd variables '@AM_V@'
  and'@AM_DEFAULT_V@' have been removed, so that instead of using
  something like:

    pkg_verbose = $(pkg_verbose_@AM_V@)
    pkg_verbose_ = $(pkg_verbose_@AM_DEFAULT_V@)

  you should simply use:

    pkg_verbose = $(pkg_verbose_$(V))
    pkg_verbose_ = $(pkg_verbose_$(AM_DEFAULT_VERBOSITY))

Warnings and diagnostic
=======================

* Automake does not warn anymore about:

  - non-POSIX variable names, like "$(dash-separated)" or "$(stem/base)";

  - nested variable expansions, like "$(foo$(V))";

  - variable definitions with indirections, like "var$(i) = value";

  - calls to make functions, whether built-in ones like "$(wildcard *.c)"
    or user-defined ones like "$(call my-func, arg1, arg2)".

  - pattern rules in GNU make style ("%.o: %.c").

  - variable definitions with ":=", as in "foo := $(immediate-evaluation)".

  - some issues specific to BSD make.

* The 'portability-recursive' warning category is obsolete, and has been
  removed.

Parallel testsuite harness
==========================

* Automake does not automatically generate the definition of 'LOG_COMPILE'
  variables anymore.  These have always been meant for internal use only
  anyway.

* The $(TESTS) and $(XFAIL_TESTS) variables are not anymore rewritten for
  $(EXEEXT) appending.  The use of compiled programs in $(TESTS) still
  works as before though, even on systems where $(EXEEXT) is non-empty,
  thanks to a careful use of pattern rules.

* The new implementation of the parallel-tests harness tries to defer
  as much as possible processing on the $(TESTS) variable at make,
  rather than doing it at automake time.  This as some positive effects
  (described below), but also entails a minor annoyance.  When automake
  runs, it cannot know anymore whether $(TESTS) contains or not any
  entry with no recognized test suffix; as a consequence, it always
  need the '$(LOG_DRIVER)' variable to be defined.  If it's not,
  automake will define it to a proper invocation of the 'test-driver'
  auxiliary script, and require that script to be present in the
  config-aux directory (or bring it in if "--add-missing" is in use).
  If you know you package won't make use of suffix-less tests (thus, in
  particular, no use of compiled programs in $(TESTS)), you can avoid
  requiring the 'test-driver' script by adding this line to your
  configure.ac:
    AC_SUBST([LOG_DRIVER], ['unused but required by automake'])

* The parallel testsuite harness realizes whether an entry of $(TESTS)
  start with $(srcdir) (as in "TESTS = $(srcdir)/foo.test"), and manages
  to correctly create the corresponding '.log' and '.trs' files in the
  build directory rather than in the source directory.

* The contents of $(TESTS) are mostly analyzed at make runtime rather
  than at automake runtime, so that it is now possible to use GNU make
  advanced features (like specific builtins or user-defined functions)
  in the definition of $(TESTS); for example, the following should now
  work as expected:
    TESTS = $(wildcard $(srcdir)/t[0-9][0-9]*.sh)

* It is not anymore possible to override TEST_LOGS at make runtime as a
  mean to redefine the list of tests to be run.

    # This won't work anymore!
    make check TESTS_LOGS="foo.log bar.log baz.log"

  But it's still possible do so overriding TESTS at make runtime; and
  in this case (as was the case for TEST_LOGS overriding), it is not
  necessary to specify the extensions of the tests to be run:

    # This will work even if complete names of the tests are (say)
    # "foo.test", "bar.test$(EXEEXT)" and "baz$(EXEEXT)".
    make check TESTS="foo bar baz"

* The use of 'RECHECK_LOGS' is not supported anymore.  Thus, to lazily
  re-run only the tests whose '.trs' or '.log' files are out-of-date,
  one must now use:

    make check AM_LAZY_CHECK=yes   # New valid API.

  instead of:

    make check RECHECK_LOGS=""     # Old API, won't work anymore.

* Per-suffix dependencies for test cases can be specified through
  variables "<ext>_LOG_DEPENDENCIES" (this being simply "LOG_DEPENDENCIES"
  for suffix-less tests).

Pattern rules and suffix rules
==============================

* Old-fashioned suffix rules are not supported anymore; Automake-NG will
  error out if you try to use them.  Use pattern rules instead, as
  advised in the GNU make manual itself.

* The .SUFFIXES: special target and the SUFFIXES special variable are
  not supported anymore either; Automake-NG will error out if you try
  to define them.

* To retain support for user-defined file extensions in the '_SOURCES'
  variables (see "Handling new file extensions" in the Automake manual),
  Automake-NG still tries to parse and understand suffix-based pattern
  rules.  So, an usage like:
   
      SUFFIXES = .baz .c
      .baz.c:
              cp $< $@
      foo_SOURCES = foo.c bar.baz
      DISTCLEANFILES = bar.c

  which was valid with mainline Automake, should be translated for
  Automake-NG as:

      %.c: %.baz
              cp $< $@
      bin_PROGRAMS = foo
      foo_SOURCES = foo.c sub/bar.baz
      DISTCLEANFILES = bar.c

Distribution
============

* "Bare" wildcards are not usable anymore in $(EXTRA_DIST):

     EXTRA_DIST = $(srcdir)/doc/*.txt  # This won't work anymore.

   You'll have to use the $(wildcard) GNU make builtin instead, as in:

     EXTRA_DIST = $(wildcard $(srcdir)/doc/*.txt)  # Good.

   or even (for a better support of VPATH builds):

     EXTRA_DIST = $(wildcard doc/*.txt $(srcdir)/doc/*.txt)  # Better.

Miscellaneous
=============

* Since GNU make is smart enough to correctly pass the values of macros
  redefined on the command line to sub-make invocations, the "special"
  variable $(AM_MAKEFLAGS) has been removed, and its content is no more
  passed to recursive make invocations.

* The variables $(DISTFILES), $(DIST_COMMON) and $(DIST_SOURCES) had
  never been documented in mainline Automake, and were always intended
  to be internal variables.  But that was not clear from their names.
  So we have renamed rename like this:

    DISTFILES     =>  am__dist_files
    DIST_COMMON   =>  am__dist_common
    DIST_SOURCES  =>  am__dist_sources

  Do not use any of these variables in your Makefiles!

* If the sources for a target library like 'libfoo.a' or 'libbar.la' are
  not explicitly specified, mainline Automake looks also (respectively)
  for the files 'libfoo_a.c' or 'libbar_la.c' as possible default sources.
  Such a behaviour is deprecated though, and is present only for the sake
  of backward-compatibility.  Automake-NG has thus dropped the behaviour,
  and will only look for (respectively) 'libfoo.c' and 'libbar.c' as
  possible default sources.

* Automake-NG has removed automatic handling and distribution of the
  obsolescent 'acconfig.h', 'config.h.top' and 'config.h.bot' files.
  One should instead use the modern macros 'AH_VERBATIM' and 'AH_TEMPLATE',
  as recommended in the Autoconf manual (as of Autoconf 2.69, chapter
  "Obsolete Constructs", section "acconfig.h").

* The 'mkinstalldirs' script is not installed, distributed, nor provided
  anymore; its same effects can be obtained by "install-sh -d" instead.
  Similarly, the $(mkinstallscripts) make variable is not defined anymore;
  one should use $(MKDIR_P) instead.

-----

Copyright (C) 2012 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
